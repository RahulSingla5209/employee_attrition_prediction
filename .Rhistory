glm.fit2 = glmnet(lasso_model_matric, Y, subset = train_indices,
family = "binomial", alpha = alpha)
glm.probs <- predict(glm.fit2,type = "response",
newx = lasso_model_matric[-train_indices,],
s = alpha)
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
coef(glm.fit2, s = alpha)
glm.fit = glm(Y ~ ., data = processed_data, family = "binomial",
subset = train_indices)
glm.probs <- predict(glm.fit,type = "response",
newdata = processed_data[-train_indices,])
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + .2, y=-0.05,
label="Decision Boundary", color="black")
glm.fit1 = glm(Y ~ ., data = processed_data[train_indices,],
family = "binomial", weights = wt)
glm.probs <- predict(glm.fit1,type = "response",
newdata = processed_data[-train_indices,])
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
lr_models2 = model.matrix(Y ~ ., data = processed_data)
lr_models2 = data.frame(Y, lr_models2)
lr_models_train1 = lr_models2[train_indices,]
lr_models_test1 = lr_models2[-train_indices,]
full2 = glm(Y ~ ., data = lr_models_train1,
family = "binomial", weights = wt)
null2 = glm(Y ~ 1, data = lr_models_train1,
family = "binomial", weights = wt)
regBackward1 = step(full2, direction="backward", k = log(num_obs))
glm.probs <- predict(regBackward1,type = "response",
newdata = lr_models_test1)
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
(125+31)/206
alpha = .03
lasso_model_matric = model.matrix(~ .,data = X)
glm.fit2 = glmnet(lasso_model_matric, Y, subset = train_indices,
family = "binomial", alpha = alpha)
glm.probs <- predict(glm.fit2,type = "response",
newx = lasso_model_matric[-train_indices,],
s = alpha)
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
coef(glm.fit2, s = alpha)
lr_models = model.matrix(Y ~ ., data = processed_data)
lr_models = data.frame(Y, lr_models)
lr_models_tr0.5ain = lr_models[train_indices,]
lr_models_test = lr_models[-train_indices,]
full1 = glm(Y ~ ., data = lr_models_train,
family = "binomial", weights = wt)
null1 = glm(Y ~ 1, data = lr_models_train,
family = "binomial", weights = wt)
regBackward = step(full1, direction="backward", k = log(num_obs))
glm.probs <- predict(regBackward,type = "response", newdata = lr_models_test)
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
173/1029
1029 - 173
856/173
(154+28)/206
lr_models = model.matrix(Y ~ ., data = processed_data)
lr_models = data.frame(Y, lr_models)
lr_models_train = lr_models[train_indices,]
lr_models_test = lr_models[-train_indices,]
full1 = glm(Y ~ ., data = lr_models_train,
family = "binomial", weights = wt)
null1 = glm(Y ~ 1, data = lr_models_train,
family = "binomial", weights = wt)
regBackward = step(full1, direction="backward", k = log(num_obs))
glm.probs <- predict(regBackward,type = "response", newdata = lr_models_test)
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
lr_models = model.matrix(Y ~ ., data = processed_data)
lr_models = data.frame(Y, lr_models)
lr_models_train = lr_models[train_indices,]
lr_models_test = lr_models[-train_indices,]
full1 = glm(Y ~ ., data = lr_models_train,
family = "binomial", weights = wt)
null1 = glm(Y ~ 1, data = lr_models_train,
family = "binomial", weights = wt)
lr_models = model.matrix(Y ~ ., data = processed_data)
lr_models = data.frame(Y, lr_models)
lr_models_train = lr_models[train_indices,]
lr_models_test = lr_models[-train_indices,]
full1 = glm(Y ~ ., data = lr_models_train, family = "binomial")
null1 = glm(Y ~ 1, data = lr_models_train, family = "binomial")
regBackward = step(full1, direction="backward", k = log(num_obs))
glm.probs <- predict(regBackward,type = "response",
newdata = lr_models_test)
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
(141+23)/206
glm.probs <- predict(regBackward1,type = "response",
newdata = lr_models_test1)
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
decision_boundary = 0.3
######### logistic fitting - baseline ################
glm.fit = glm(Y ~ ., data = processed_data, family = "binomial",
subset = train_indices)
glm.probs <- predict(glm.fit,type = "response",
newdata = processed_data[-train_indices,])
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + .2, y=-0.05,
label="Decision Boundary", color="black")
######## logistic fitting - with different class weights ###############
glm.fit1 = glm(Y ~ ., data = processed_data[train_indices,],
family = "binomial", weights = wt)
glm.probs <- predict(glm.fit1,type = "response",
newdata = processed_data[-train_indices,])
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
(128 + 31)/206
(148+26)/206
26/39
decision_boundary = 0.3
######### logistic fitting - baseline ################
glm.fit = glm(Y ~ ., data = processed_data, family = "binomial",
subset = train_indices)
glm.probs <- predict(glm.fit,type = "response",
newdata = processed_data[-train_indices,])
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + .2, y=-0.05,
label="Decision Boundary", color="black")
train_size = 0.8
train_indices = sample(num_obs, num_obs * train_size)
wt = rep(1, num_obs * train_size)
wt[Y[train_indices] == "Yes"] = 3
decision_boundary = 0.3
######### logistic fitting - baseline ################
glm.fit = glm(Y ~ ., data = processed_data, family = "binomial",
subset = train_indices)
glm.probs <- predict(glm.fit,type = "response",
newdata = processed_data[-train_indices,])
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + .2, y=-0.05,
label="Decision Boundary", color="black")
162/206
22/40
glm.fit1 = glm(Y ~ ., data = processed_data[train_indices,],
family = "binomial", weights = wt)
glm.probs <- predict(glm.fit1,type = "response",
newdata = processed_data[-train_indices,])
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
train_size = 0.8
train_indices = sample(num_obs, num_obs * train_size)
wt = rep(1, num_obs * train_size)
wt[Y[train_indices] == "Yes"] = 3
decision_boundary = 0.3
######### logistic fitting - baseline ################
glm.fit = glm(Y ~ ., data = processed_data, family = "binomial",
subset = train_indices)
glm.probs <- predict(glm.fit,type = "response",
newdata = processed_data[-train_indices,])
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + .2, y=-0.05,
label="Decision Boundary", color="black")
processed_data = cbind(X,Y)
train_size = 0.8
train_indices = sample(num_obs, num_obs * train_size)
wt = rep(1, num_obs * train_size)
wt[Y[train_indices] == "Yes"] = 3
decision_boundary = 0.3
######### logistic fitting - baseline ################
glm.fit = glm(Y ~ ., data = processed_data, family = "binomial",
subset = train_indices)
glm.probs <- predict(glm.fit,type = "response",
newdata = processed_data[-train_indices,])
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + .2, y=-0.05,
label="Decision Boundary", color="black")
processed_data = cbind(X,Y)
train_size = 0.8
train_indices = sample(num_obs, num_obs * train_size)
wt = rep(1, num_obs * train_size)
wt[Y[train_indices] == "Yes"] = 3
decision_boundary = 0.3
######### logistic fitting - baseline ################
glm.fit = glm(Y ~ ., data = processed_data, family = "binomial",
subset = train_indices)
glm.probs <- predict(glm.fit,type = "response",
newdata = processed_data[-train_indices,])
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + .2, y=-0.05,
label="Decision Boundary", color="black")
processed_data = cbind(X,Y)
train_size = 0.75
train_indices = sample(num_obs, num_obs * train_size)
wt = rep(1, num_obs * train_size)
wt[Y[train_indices] == "Yes"] = 3
decision_boundary = 0.3
######### logistic fitting - baseline ################
glm.fit = glm(Y ~ ., data = processed_data, family = "binomial",
subset = train_indices)
glm.probs <- predict(glm.fit,type = "response",
newdata = processed_data[-train_indices,])
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + .2, y=-0.05,
label="Decision Boundary", color="black")
processed_data = cbind(X,Y)
train_size = 0.75
train_indices = sample(num_obs, num_obs * train_size)
wt = rep(1, num_obs * train_size)
wt[Y[train_indices] == "Yes"] = 3
decision_boundary = 0.3
######### logistic fitting - baseline ################
glm.fit = glm(Y ~ ., data = processed_data, family = "binomial",
subset = train_indices)
glm.probs <- predict(glm.fit,type = "response",
newdata = processed_data[-train_indices,])
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + .2, y=-0.05,
label="Decision Boundary", color="black")
(178+29)/258
29/50
glm.fit1 = glm(Y ~ ., data = processed_data[train_indices,],
family = "binomial", weights = wt)
glm.probs <- predict(glm.fit1,type = "response",
newdata = processed_data[-train_indices,])
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
(156+36)/258
36/50
lr_models = model.matrix(Y ~ ., data = processed_data)
lr_models = data.frame(Y, lr_models)
lr_models_train = lr_models[train_indices,]
lr_models_test = lr_models[-train_indices,]
full1 = glm(Y ~ ., data = lr_models_train, family = "binomial")
null1 = glm(Y ~ 1, data = lr_models_train, family = "binomial")
regBackward = step(full1, direction="backward", k = log(num_obs))
glm.probs <- predict(regBackward,type = "response",
newdata = lr_models_test)
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
mat  = cor(X[,-categorical_var_indices])
corrplot(mat, method="circle")
195/258
lr_models2 = model.matrix(Y ~ ., data = processed_data)
lr_models2 = data.frame(Y, lr_models2)
lr_models_train1 = lr_models2[train_indices,]
lr_models_test1 = lr_models2[-train_indices,]
full2 = glm(Y ~ ., data = lr_models_train1,
family = "binomial", weights = wt)
null2 = glm(Y ~ 1, data = lr_models_train1,
family = "binomial", weights = wt)
regBackward1 = step(full2, direction="backward", k = log(num_obs))
glm.probs <- predict(regBackward1,type = "response",
newdata = lr_models_test1)
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
(149+35)/258
View(regBackward1)
35/50
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
lr_models2 = model.matrix(Y ~ ., data = processed_data)
lr_models2 = data.frame(Y, lr_models2)
lr_models_train1 = lr_models2[train_indices,]
lr_models_test1 = lr_models2[-train_indices,]
full2 = glm(Y ~ ., data = lr_models_train1,
family = "binomial", weights = wt)
null2 = glm(Y ~ 1, data = lr_models_train1,
family = "binomial", weights = wt)
regBackward1 = step(full2, direction="backward", k = log(num_obs))
glm.probs <- predict(regBackward1,type = "response",
newdata = lr_models_test1)
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
alpha = .03
lasso_model_matric = model.matrix(~ .,data = X)
glm.fit2 = glmnet(lasso_model_matric, Y, subset = train_indices,
family = "binomial", alpha = alpha)
glm.probs <- predict(glm.fit2,type = "response",
newx = lasso_model_matric[-train_indices,],
s = alpha)
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
coef(glm.fit2, s = alpha)
(192+35)/258
35/50
alpha = .04
lasso_model_matric = model.matrix(~ .,data = X)
glm.fit2 = glmnet(lasso_model_matric, Y, subset = train_indices,
family = "binomial", alpha = alpha)
glm.probs <- predict(glm.fit2,type = "response",
newx = lasso_model_matric[-train_indices,],
s = alpha)
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
coef(glm.fit2, s = alpha)
(193+36)/258
alpha = .05
lasso_model_matric = model.matrix(~ .,data = X)
glm.fit2 = glmnet(lasso_model_matric, Y, subset = train_indices,
family = "binomial", alpha = alpha)
glm.probs <- predict(glm.fit2,type = "response",
newx = lasso_model_matric[-train_indices,],
s = alpha)
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
coef(glm.fit2, s = alpha)
alpha = .06
lasso_model_matric = model.matrix(~ .,data = X)
glm.fit2 = glmnet(lasso_model_matric, Y, subset = train_indices,
family = "binomial", alpha = alpha)
glm.probs <- predict(glm.fit2,type = "response",
newx = lasso_model_matric[-train_indices,],
s = alpha)
glm.pred <- ifelse(glm.probs > decision_boundary, "Yes", "No")
table(glm.pred, Y[-train_indices])
plot_df = data.frame(glm.probs, Y[-train_indices])
plot_df %>%
ggplot(aes(x = glm.probs, color = Y..train_indices.)) +
geom_boxplot() + xlab("logistic regression output") +
labs(color = "Attrition") +
geom_vline(xintercept = decision_boundary) +
annotate(geom="text", x=decision_boundary + 0.2, y=-0.05,
label="Decision Boundary", color="black")
coef(glm.fit2, s = alpha)
